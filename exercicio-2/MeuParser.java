
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class MeuParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public MeuParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public MeuParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MeuParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\005\000\002\002\004\000\002\002\004\000\002\003" +
    "\011\000\002\004\005\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\004\004\006\001\002\000\004\012\024\001" +
    "\002\000\004\002\023\001\002\000\004\010\007\001\002" +
    "\000\004\013\010\001\002\000\004\007\021\001\002\000" +
    "\004\011\012\001\002\000\004\013\013\001\002\000\004" +
    "\006\017\001\002\000\004\005\015\001\002\000\004\013" +
    "\013\001\002\000\004\012\uffff\001\002\000\004\014\020" +
    "\001\002\000\006\005\ufffd\012\ufffd\001\002\000\004\014" +
    "\022\001\002\000\004\011\ufffe\001\002\000\004\002\001" +
    "\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\022\000\006\002\004\003\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MeuParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MeuParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MeuParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



  public static void main(String[] args) throws Exception {
    Compilador compilador = new Compilador();
    compilador.compilar(args[0]);
  }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$MeuParser$actions {
  private final MeuParser parser;

  /** Constructor */
  CUP$MeuParser$actions(MeuParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$MeuParser$do_action_part00000000(
    int                        CUP$MeuParser$act_num,
    java_cup.runtime.lr_parser CUP$MeuParser$parser,
    java.util.Stack            CUP$MeuParser$stack,
    int                        CUP$MeuParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MeuParser$result;

      /* select the action based on the action number */
      switch (CUP$MeuParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).value;
		RESULT = start_val;
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MeuParser$parser.done_parsing();
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= stmt SEMICOLON 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)).value;
		 System.out.println(s); 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-1)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // stmt ::= IF LPAREN cond RPAREN assign ELSE assign 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = "if (" + c + ") " + a + " else " + b; 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("stmt",1, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-6)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cond ::= ID LT NUM 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = id + " < " + num; 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("cond",2, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // assign ::= ID ASSIGN NUM 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)).value;
		int numleft = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$MeuParser$stack.peek()).value;
		 RESULT = id + " = " + num + ";"; 
              CUP$MeuParser$result = parser.getSymbolFactory().newSymbol("assign",3, ((java_cup.runtime.Symbol)CUP$MeuParser$stack.elementAt(CUP$MeuParser$top-2)), ((java_cup.runtime.Symbol)CUP$MeuParser$stack.peek()), RESULT);
            }
          return CUP$MeuParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$MeuParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$MeuParser$do_action(
    int                        CUP$MeuParser$act_num,
    java_cup.runtime.lr_parser CUP$MeuParser$parser,
    java.util.Stack            CUP$MeuParser$stack,
    int                        CUP$MeuParser$top)
    throws java.lang.Exception
    {
              return CUP$MeuParser$do_action_part00000000(
                               CUP$MeuParser$act_num,
                               CUP$MeuParser$parser,
                               CUP$MeuParser$stack,
                               CUP$MeuParser$top);
    }
}

}
